imports:
  - "com.fasterxml.jackson.annotation.JsonProperty"
  - "com.fasterxml.jackson.databind.jsontype.NamedType"
  - "com.sope.common.annotations.SqlExpr"
  - "com.sope.common.transform.model.action.SingleOutputTransform"
  - "com.sope.common.transform.model.action.MultiOutputTransform"
  - "com.sope.common.transform.model.TransformationTypeRegistration"
  - "com.sope.common.sql.Types.TFunc"
definitions:
  - id: select
    params:
      - name: columns
        type: Seq[String]
        is_required: true
        is_sql_expr: true
    expr: "Select(columns :_*)"
  - id: select_pattern
    params:
      - name: pattern
        type: String
        is_required: true
    expr: "Select(pattern)"
  - id: select_reorder
    params:
      - name: reorderDataset
        type: String
        is_required: true
        mapped_name: reorder_dataset
        is_dataset_ref: true
    expr: "SelectReorder(datasets.head)"
  - id: select_aliased
    params:
      - name: originalDatasetAlias
        type: String
        is_required: true
        mapped_name: original_dataset_alias
        is_dataset_ref: true
      - name: includeColumns
        type: Option[Seq[String]]
        mapped_name: include_columns
      - name: excludeColumns
        type: Option[Seq[String]]
        mapped_name: skip_columns
    expr: "SelectAliased(datasets.head, originalDatasetAlias, includeColumns.getOrElse(Nil), excludeColumns.getOrElse(Nil))"
  - id: rename
    params:
      - name: list
        type: Map[String, String]
        is_required: true
    expr: "Rename(list.toSeq :_*)"
  - id: rename_all
    params:
      - name: append
        type: String
        is_required: true
      - name: prefix
        type: Boolean
        is_required: true
      - name: columns
        type: Option[Seq[String]]
    expr: "RenameAll(append, prefix, columns.getOrElse(Nil) :_*)"
  - id: rename_all_pattern
    params:
      - name: append
        type: String
        is_required: true
      - name: prefix
        type: Boolean
        is_required: true
      - name: pattern
        type: String
        is_required: true
    expr: "RenameAll(append, prefix, pattern)"
  - id: rename_all_find_replace
    params:
      - name: pattern
        type: String
        is_required: true
      - name: find
        type: String
        is_required: true
      - name: replace
        type: String
        is_required: true
    expr: "RenameAll(pattern, find, replace)"
  - id: filter
    params:
      - name: condition
        type: String
        is_sql_expr: true
        is_required: true
    expr: "Filter(condition)"
  - id: drop
    params:
      - name: columns
        type: Seq[String]
        is_required: true
    expr: "Drop(columns :_*)"
  - id: transform
    params:
      - name: list
        type: Map[String, String]
        is_required: true
        is_sql_expr: true
    expr: "Transform(list.toSeq :_*)"
  - id: transform_all
    params:
      - name: singleArgFunctionName
        type: String
        mapped_name: single_arg_function
        is_required: true
      - name: suffix
        type: Option[String]
      - name: columns
        type: Option[Seq[String]]
        is_sql_expr: true
    expr: "TransformAll(singleArgFunctionName, suffix, columns.getOrElse(Nil) :_*)"
  - id: transform_all_pattern
    params:
      - name: singleArgFunctionName
        type: String
        mapped_name: single_arg_function
        is_required: true
      - name: suffix
        type: Option[String]
      - name: pattern
        type: String
        is_required: true
    expr: "TransformAll(singleArgFunctionName, suffix, pattern)"
  - id: transform_all_multi_arg
    params:
      - name: multiArgFunctionName
        type: String
        mapped_name: multi_arg_function
        is_required: true
      - name: columns
        type: Map[String, Seq[String]]
        is_required: true
        is_sql_expr: true
    expr: "TransformAllMultiArg(multiArgFunctionName, columns.toSeq :_*)"
  - id: join
    params:
      - name: joinColumns
        type: Seq[String]
        is_required: true
        mapped_name: columns
      - name: joinType
        type: String
        is_required: true
        mapped_name: join_type
      - name: joinWith
        type: String
        is_dataset_ref: true
        is_required: true
        mapped_name: with
    expr: "Join(joinColumns: _*).apply(joinType).apply(datasets.head)"
  - id: join_exprs
    params:
      - name: joinExprs
        type: Seq[String]
        is_required: true
        mapped_name: join_exprs
      - name: joinType
        type: String
        is_required: true
        mapped_name: join_type
      - name: joinWith
        type: String
        is_dataset_ref: true
        is_required: true
        mapped_name: with
    expr: "JoinExpr(joinExprs: _*).apply(joinType).apply(datasets.head)"
  - id: aggregate
    params:
      - name:  aggExprs
        type: Map[String, String]
        is_required: true
        is_sql_expr: true
        mapped_name: exprs
    expr: "Aggregate(aggExprs.toSeq :_*)"
  - id: group_by
    params:
      - name:  groupColumns
        type: Seq[String]
        is_required: true
        is_sql_expr: true
        mapped_name: columns
      - name: groupExprs
        type: Map[String, String]
        is_required: true
        is_sql_expr: true
        mapped_name: exprs
    expr: "GroupBy(groupColumns :_*).apply(groupExprs.toSeq)"
  - id: union
    params:
      - name: datasets
        type: Seq[String]
        is_dataset_ref_list: true
        is_required: true
    expr: "Union(datasets: _*)"
  - id: intersect
    params:
      - name: datasets
        type: Seq[String]
        is_dataset_ref_list: true
        is_required: true
    expr: "Intersect(datasets: _*)"
  - id: except
    params:
      - name: datasets
        type: Seq[String]
        is_dataset_ref_list: true
        is_required: true
    expr: "Except(datasets: _*)"
  - id: order_by
    params:
      - name: columns
        type: Seq[String]
        is_required: true
    expr: "OrderBy(columns: _*)"
  - id: distinct
    params: []
    expr: "Distinct()"
  - id: limit
    params:
      - name: size
        type: Int
        is_required: true
    expr: "Limit(size)"
